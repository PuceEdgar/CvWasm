@page "/"
@inject IJSRuntime JSRuntime
@inject HttpClient Http

<PageTitle>Home</PageTitle>

<h1>Hello, world!</h1>


@* @if (selectedComponent is not null)
{
    <div class="myContent">
        <DynamicComponent Type="selectedComponent.Type" Parameters="selectedComponent.Parameters"/>
    </div>     
    @if (selectedComponent.Type == typeof(WorkExperience))
    {
        <p>Experience @(currentExperienceIndex + 1) out of @cv.Experience.Length</p>
    }
} *@

@if (listOfComponents.Count > 0)
{
    @foreach (var component in listOfComponents)
    {
        <div class="myContent">
            <DynamicComponent Type="component.Type" Parameters="component.Parameters" />
        </div>
       @*  @if (component.Type == typeof(WorkExperience))
        {
            <p>Experience @(currentExperienceIndex + 1) out of @cv.Experience.Length</p>
        } *@
    }
}

<label>Guest></label>
<input @ref="textInput" @bind-value="@Command" @bind-value:event="oninput" @onkeydown="Enter" @onblur="FocusElement" />


@code {
    private CvModel? cv;
    private Dictionary<string, ComponentMetadata>? components;
    private ComponentMetadata? selectedComponent;    
    private ElementReference textInput;
    private string Command = string.Empty;
    private int currentExperienceIndex = 0;
    private List<ComponentMetadata> listOfComponents = [];

    protected override async Task OnInitializedAsync()
    {
        cv = await Http.GetFromJsonAsync<CvModel>("cv-data/cv.json") ?? new();
        InitializeComponentsWithParameters(cv);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await FocusElement();
        }

        await JSRuntime.InvokeVoidAsync("scrollToInput");
    }

    private async Task FocusElement()
    {
        await textInput.FocusAsync();
    }

    //TODO:
    //implement back functionality. probably use list of navigated pages/commands and on arrow up or command back load previos command and maybe on arrow down/next show next if exists

    private void InitializeComponentsWithParameters(CvModel cv)
    {
        components = new(StringComparer.OrdinalIgnoreCase)
        {
            [nameof(About)] = new ComponentMetadata()
            {
                Type = typeof(About),
                Name = "About",
                Parameters = {[nameof(About.Data)] = cv.About!}
            },
            // [nameof(WorkExperience)] = new ComponentMetadata()
            // {
            //     Type = typeof(WorkExperience),
            //     Name = "Work Experience",
            //     Parameters = { [nameof(WorkExperience.Data)] = cv.Experience![currentExperienceIndex] }
            // },
            [nameof(HardSkills)] = new ComponentMetadata()
            {
                    Type = typeof(HardSkills),
                Name = "Hard Skills",
                    Parameters = { [nameof(HardSkills.Data)] = cv.Skills!.HardSkills! }
            },
                [nameof(SoftSkills)] = new ComponentMetadata()
                {
                    Type = typeof(SoftSkills),
                    Name = "Soft Skills",
                    Parameters = { [nameof(SoftSkills.Data)] = cv.Skills.SoftSkills! }
                },
            [nameof(Education)] = new ComponentMetadata()
            {
                Type = typeof(Education),
                Name = "Education",
                Parameters = { [nameof(Education.Data)] = cv.Education! }
            },
            [nameof(Help)] = new ComponentMetadata()
            {
                Type = typeof(Help),
                Name = "Help"
            },
            [nameof(Home)] = new ComponentMetadata()
            {
                Type = typeof(Home),
                Name = "Home"
            }
        };
    }

    private readonly Dictionary<string, string> ValidCommands = new()
        {
            [AboutCommand] = nameof(About),
            [ExperienceCommand] = nameof(WorkExperience),
            [HardSkillsCommand] = nameof(HardSkills),
            [SoftSkillsCommand] = nameof(SoftSkills),
            [EducationCommand] = nameof(Education),
            [HelpCommand] = nameof(Help),
            [HomeCommand] = nameof(Home),
        };

    private async Task Enter(KeyboardEventArgs e)
    {
        if ((e.Code == "ArrowLeft" || e.Code == "ArrowRight") && listOfComponents.Last().Type == typeof(WorkExperience))
        {
            SelectCurrentWorkExperience(e.Code);
        }

        if ((e.Code == "Enter" || e.Code == "NumpadEnter"))
        {
            ShowSelectedComponent();
        }
        
    }

    private void SelectCurrentWorkExperience(string code)
    {
        if (code == "ArrowRight" && currentExperienceIndex < cv.Experience.Length - 1)
        {
            currentExperienceIndex++;
        }
        if (code == "ArrowLeft" && currentExperienceIndex > 0)
        {
            currentExperienceIndex--;
        }
        //listOfComponents.Last().Parameters[nameof(WorkExperience.Data)] = cv.Experience[currentExperienceIndex];
        selectedComponent.Parameters[nameof(WorkExperience.Data)] = cv.Experience[currentExperienceIndex];
        selectedComponent.Parameters[nameof(WorkExperience.CurrentIndex)] = currentExperienceIndex;
    }

    private void ShowSelectedComponent()
    {
        switch (Command)
        {
            case ClearCommand:
                ClearWindow();
                break;
            case AboutCommand:
            case EducationCommand:
            case HardSkillsCommand:
            case SoftSkillsCommand:
            case HelpCommand:
                LoadComponent(ValidCommands[Command]);
                break;
            case ExperienceCommand:
                LoadExperienceComponent();
                break;
            default:
                LoadErrorComponent(Command);
                break;
        }

        Command = string.Empty;
    }

    private void LoadExperienceComponent()
    {
        selectedComponent = new ComponentMetadata()
            {
                Type = typeof(WorkExperience),
                Name = "Work Experience",
                Parameters = { 
                    [nameof(WorkExperience.Data)] = cv!.Experience![0],
                [nameof(WorkExperience.TotalExperienceCount)] = cv.Experience.Count()
                }
            };
        listOfComponents.Add(selectedComponent);
    }

    private void LoadComponent(string componentName)
    {
        selectedComponent = components[componentName];
        listOfComponents.Add(selectedComponent);
    }

    private void LoadErrorComponent(string command)
    {
        selectedComponent = new ComponentMetadata()
                {
                    Type = typeof(Error),
                    Name = "Error",
                Parameters = { [nameof(Error.BadCommand)] = command }
                };
        listOfComponents.Add(selectedComponent);
    }

    private void ClearWindow()
    {
        listOfComponents = [];
    }
}


